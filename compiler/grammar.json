{
    "lex": {
        "rules": [
           ["\\s+",                    "/* skip whitespace */"],
           ["if",                      "return 'IF';"],
           ["while",                   "return 'WHILE';"],
           ["do",                      "return 'DO';"],

           ["and",                    "return 'AND';"],
           ["or",                    "return 'OR';"],

           ["end",                     "return 'END';"],

           ["of",                     "return 'OF';"],
           ["will",                     "return 'WILL';"],
           ["finish",                    "return 'FINISH';"],

           ["move",                     "return 'MOVE';"],
           ["turnLeft",                 "return 'TURNLEFT';"],
           ["turnRight",                "return 'TURNRIGHT';"],

           ["xCoordinate",                 "return 'XCOORDINATE';"],
           ["yCoordinate",                 "return 'YCOORDINATE';"],
           ["value",                       "return 'VALUE';"],
           ["left",                        "return 'LEFT';"],
           ["right",                       "return 'RIGHT';"],
           ["top",                         "return 'TOP';"],
           ["bottom",                      "return 'BOTTOM';"],

           ["[a-zA-Z_]\\w*",           "return 'IDENTIFIER';"],
           ["[0-9]+(?:\\.[0-9]+)?",    "return 'NUMBER';"],

           ["\\=|\\<=|\\>=|\\<|\\>",   "return 'COMPARATOR';"],
           ["\\-",                           "return '-';"],
           ["\\+",                         "return '+';"],
           ["$",                           "return 'EOF';"]
        ]
    },

    "operators": [
        ["left", "+", "-"]
    ],

    "start": "program",

    "bnf": {
        "program" :[
          [ "statementList EOF",       "return $1;"  ]
        ],

        "statementList": [
          ["statement",                "$$ = [$1];"],
          ["statement statementList",  "$$ = [$1].concat($2);"]
        ],

        "statement": [
          ["if",          "$$ = $1"],
          ["while",       "$$ = $1"],
          ["functionCall", "$$ = $1"],
          ["FINISH",        "$$ = {type: 'finish'};"]
        ],

        "functionCall": [
          ["IDENTIFIER WILL method",  "$$ = {type: 'method', object: $1, method: $3};"]
        ],

        "if": [
          ["IF expression DO statementList END", "$$ = {type: 'if', condition: $2, body: $4};"]
        ],

        "while": [
          ["WHILE expression DO statementList END",
            "$$ = {type: 'while', condition: $2, body: $4}"]
        ],

        "property": [
          ["XCOORDINATE",               "$$ = $1"],
          ["YCOORDINATE",               "$$ = $1"],
          ["COLOR",                     "$$ = $1"],
          ["LEFT",                      "$$ = $1"],
          ["RIGHT",                     "$$ = $1"],
          ["TOP",                       "$$ = $1"],
          ["BOTTOM",                    "$$ = $1"]
        ],

        "method": [
          ["MOVE",                     "$$ = $1"],
          ["TURNLEFT",                 "$$ = $1"],
          ["TURNRIGHT",                "$$ = $1"]
        ],

        "expression": [
          ["comparison AND expression", "$$ = {type: 'expression', left: $1, logic: $2, right: $3};"],
          ["comparison OR expression",  "$$ = {type: 'expression', left: $1, logic: $2, right:  $3};"],
          ["comparison",                "$$ = $1;"]
        ],

        "unitExpression": [
          ["property OF IDENTIFIER",    "$$ = {type: 'property', object: $3, property: $1};"],
          ["math",                      "$$ = $1;"]
        ],

        "addition": [
          ["unitExpression + unitExpression",
            "$$ = {type: 'math', left: $1, right: $3, operator: $2};"],
          ["unitExpression + math",
            "$$ = {type: 'math', left: $1, right: $3, operator: $2};"]
        ],

        "substraction": [
          ["unitExpression - unitExpression",
            "$$ = {type: 'math', left: $1, right: $3, operator: $2};"],
          ["unitExpression - math",
            "$$ = {type: 'math', left: $1, right: $3, operator: $2};"]
        ],

        "math": [
          ["addition", "$1 = $1;"],
          ["substraction", "$1 = $1;"]
        ],

        "comparison": [
          ["unitExpression COMPARATOR unitExpression",
            "$$ = {type: 'comparison', operator: $2, left: $1, right: $3};"]
        ]
    }
}
